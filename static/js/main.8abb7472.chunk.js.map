{"version":3,"sources":["Components/PatientInfo/getAge.js","Components/PatientInfo/PatientInfo.jsx","actions/actions.js","Components/PatientItem/PatientItem.jsx","Components/PatientItem/isPatientSelected.js","Components/PatientList/PatientList.jsx","settings.js","Components/ListArea/ListArea.jsx","Components/ListArea/downloadPatientLists.js","App.jsx","reducers/index.js","store/configureStore.js","index.jsx"],"names":["getAge","dateString","today","Date","birthDate","age","getFullYear","mParameter","getMonth","getDate","PatientInfo","useSelector","state","selectedPatient","isPatientSelected","className","firstName","diagnosis","ACTION_NAMES","patientListFetchSuccess","data","division","type","payload","PatientItem","patientData","storePatientData","patient","dispatch","useDispatch","JSON","stringify","onClick","Container","Row","Col","historyNumber","PatientList","patientList","map","LISTS_DIVISIONS","ListArea","error","useEffect","a","axios","get","process","presentListResponse","quittingListResponse","id","name","defaultChecked","htmlFor","presentListIsLoaded","present","length","quittingListIsLoaded","quitting","message","App","fluid","xs","md","initialState","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8abb7472.chunk.js","sourcesContent":["/* eslint-disable no-plusplus */\nexport default function getAge(dateString) {\n  const today = new Date();\n  const birthDate = new Date(dateString);\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const mParameter = today.getMonth() - birthDate.getMonth();\n  if (mParameter < 0 || (mParameter === 0 && today.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  return age;\n}\n","import React from 'react';\nimport './PatientInfo.sass';\nimport { useSelector } from 'react-redux';\nimport getAge from './getAge';\n\nfunction PatientInfo() {\n  const { selectedPatient, isPatientSelected } = useSelector((state) => state);\n  return (\n    <div className=\"patientInfo\">\n      <div className=\"infoTitle\">\n        Информация о пациенте\n      </div>\n      <div className=\"infoArea\">\n        <div className=\"directionRow\">\n          <div className=\"infoParameter\">ФИО</div>\n          <div className=\"infoValue\">\n            {(isPatientSelected === true)\n              ? selectedPatient.firstName\n              : ''}\n          </div>\n        </div>\n        <div className=\"directionRow\">\n          <div className=\"infoParameter\">Возраст</div>\n          <div className=\"infoValue\">\n            {(isPatientSelected === true)\n              ? getAge(selectedPatient.birthDate)\n              : ''}\n          </div>\n        </div>\n        <div className=\"directionRow\">\n          <div className=\"infoParameter\">Диагноз</div>\n          <div className=\"infoValue\">\n            {(isPatientSelected === true)\n              ? selectedPatient.diagnosis\n              : ''}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PatientInfo;\n","export const ACTION_NAMES = {\n  PATIENT_LISTS_FETCH_SUCCESS: 'PATIENT_LISTS_FETCH_SUCCESS',\n  PATIENT_LISTS_FETCH_FAIL: 'PATIENT_LISTS_FETCH_FAIL',\n  SELECT_PATIENT: 'SELECT_PATIENT',\n};\n\nexport const patientListFetchSuccess = (data, division) => ({\n  type: ACTION_NAMES.PATIENT_LISTS_FETCH_SUCCESS,\n  payload: data,\n  division,\n});\n\nexport const patientListFetchFail = (error) => ({\n  type: ACTION_NAMES.PATIENT_LISTS_FETCH_FAIL,\n  payload: error,\n});\n\nexport const selectPatient = (data) => ({\n  type: ACTION_NAMES.SELECT_PATIENT,\n  payload: data,\n});\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React from 'react';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport './PatientItem.sass';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPatient } from '../../actions/actions';\nimport isPatientSelected from './isPatientSelected';\n\nfunction PatientItem({ patient }) {\n  const dispatch = useDispatch();\n  const { selectedPatient } = useSelector((state) => state);\n  return (\n    <li\n      className={(isPatientSelected(patient, selectedPatient))\n        ? 'selected'\n        : 'casual'}\n      onClick={() => { dispatch(selectPatient(patient)); }}\n    >\n      <div className=\"listHover\">\n        <Container>\n          <Row>\n            <Col>\n              {patient.historyNumber}\n            </Col>\n            <Col>\n              {patient.firstName}\n            </Col>\n            <Col>\n              {patient.diagnosis}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n    </li>\n  );\n}\n\nPatientItem.propTypes = {\n  patient: PropTypes.shape({\n    historyNumber: PropTypes.number,\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    patrName: PropTypes.string,\n    birthDate: PropTypes.string,\n    diagnosis: PropTypes.string,\n    bedNumber: PropTypes.number,\n  }).isRequired,\n};\n\nexport default PatientItem;\n","export default function isPatientSelected(patientData, storePatientData) {\n  if (JSON.stringify(patientData) === JSON.stringify(storePatientData)) {\n    return true;\n  } return false;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PatientItem from '../PatientItem/PatientItem';\n\nexport default function PatientList({ patientList, division }) {\n  return (\n    <ul>\n      {patientList.map((patient) => (\n        <PatientItem\n          patient={patient}\n          key={division + patient.historyNumber}\n        />\n      ))}\n    </ul>\n  );\n}\n\nPatientList.propTypes = {\n  patientList: PropTypes.arrayOf(PropTypes.shape({\n    historyNumber: PropTypes.number,\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    patrName: PropTypes.string,\n    birthDate: PropTypes.string,\n    diagnosis: PropTypes.string,\n    bedNumber: PropTypes.number,\n  })).isRequired,\n  division: PropTypes.string.isRequired,\n};\n","export const LISTS_DIVISIONS = {\n  PRESENT_LIST: 'PRESENT_LIST',\n  QUITTING_LIST: 'QUITTING_LIST',\n};\n\nexport const { REACT_APP_PRESENT_LIST_JSON_URL } = process.env;\n\nexport const { REACT_APP_QUITTING_LIST_JSON_URL } = process.env;\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { useEffect } from 'react';\nimport './ListArea.sass';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PatientList from '../PatientList/PatientList';\nimport downloadPatientLists from './downloadPatientLists';\n\nfunction ListArea() {\n  const { patientList, error } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  useEffect(() => { dispatch(downloadPatientLists()); }, []);\n  if (error === null) {\n    return (\n      <div className=\"patientsList\">\n        <div className=\"listNav\">\n          <input type=\"radio\" id=\"tab-btn-1\" name=\"listNav\" defaultChecked />\n          <label htmlFor=\"tab-btn-1\">\n            <div className=\"navButton\">\n              ПРИСУТСТВУЮТ(\n              {(patientList.presentListIsLoaded === true)\n                ? patientList.present.length\n                : '0'}\n              )\n            </div>\n          </label>\n          <input type=\"radio\" id=\"tab-btn-2\" name=\"listNav\" />\n          <label htmlFor=\"tab-btn-2\">\n            <div className=\"navButton\">\n              ВЫБЫВШИЕ(\n              {(patientList.quittingListIsLoaded === true)\n                ? patientList.quitting.length\n                : '0'}\n\n              )\n            </div>\n          </label>\n          <div className=\"listColumns\">\n            <Container>\n              <Row>\n                <Col>\n                  №ИБ\n                </Col>\n                <Col>\n                  ФИО\n                </Col>\n                <Col>\n                  Диагноз\n                </Col>\n              </Row>\n            </Container>\n          </div>\n          <div id=\"present\" className=\"scrollable\">\n            {(patientList.presentListIsLoaded === true)\n              ? <PatientList patientList={patientList.present} division=\"PRESENT_LIST\" />\n              : <div>Загрузка, подождите пожалуйста</div>}\n\n          </div>\n          <div id=\"quitting\" className=\"scrollable\">\n            {(patientList.presentListIsLoaded === true)\n              ? <PatientList patientList={patientList.quitting} division=\"QUITTING_LIST\" />\n              : <div>Загрузка, подождите пожалуйста</div>}\n\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n  return (\n    <div className=\"patientsList\">\n      {error.message}\n    </div>\n  );\n}\n\nexport default ListArea;\n","import axios from 'axios';\nimport { patientListFetchSuccess, patientListFetchFail } from '../../actions/actions';\nimport { LISTS_DIVISIONS, REACT_APP_PRESENT_LIST_JSON_URL, REACT_APP_QUITTING_LIST_JSON_URL } from '../../settings';\n\nexport default function downloadPatientLists() {\n  return async (dispatch) => {\n    try {\n      const presentListResponse = await axios.get(REACT_APP_PRESENT_LIST_JSON_URL);\n      dispatch(patientListFetchSuccess(presentListResponse.data, LISTS_DIVISIONS.PRESENT_LIST));\n      const quittingListResponse = await axios.get(REACT_APP_QUITTING_LIST_JSON_URL);\n      dispatch(patientListFetchSuccess(quittingListResponse.data, LISTS_DIVISIONS.QUITTING_LIST));\n    } catch (error) {\n      dispatch(patientListFetchFail(error));\n    }\n  };\n}\n","import './App.sass';\nimport React from 'react';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport PatientInfo from './Components/PatientInfo/PatientInfo';\nimport ListArea from './Components/ListArea/ListArea';\n\nfunction App() {\n  return (\n    <div>\n      <Container fluid>\n        <Row>\n          <Col xs={12} md={6}>\n            <PatientInfo />\n          </Col>\n          <Col xs={12} md={6}>\n            <ListArea />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ACTION_NAMES } from '../actions/actions';\nimport { LISTS_DIVISIONS } from '../settings';\n\nexport const initialState = {\n  patientList: {\n    quitting: [],\n    quittingListIsLoaded: false,\n    present: [],\n    presentListIsLoaded: false,\n  },\n  selectedPatient: {},\n  isPatientSelected: false,\n  error: null,\n};\n\nexport function rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTION_NAMES.PATIENT_LISTS_FETCH_SUCCESS:\n      switch (action.division) {\n        case LISTS_DIVISIONS.PRESENT_LIST:\n          return {\n            ...state,\n            patientList: {\n              ...state.patientList,\n              present: action.payload,\n              presentListIsLoaded: true,\n            },\n          };\n        case LISTS_DIVISIONS.QUITTING_LIST:\n          return {\n            ...state,\n            patientList: {\n              ...state.patientList,\n              quitting: action.payload,\n              quittingListIsLoaded: true,\n            },\n          };\n        default:\n          return state;\n      }\n    case ACTION_NAMES.PATIENT_LISTS_FETCH_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case ACTION_NAMES.SELECT_PATIENT:\n      return {\n        ...state,\n        selectedPatient: {\n          ...action.payload,\n        },\n        isPatientSelected: true,\n      };\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store/configureStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}