{"version":3,"sources":["Components/PatientInfo/PatientInfo.jsx","actions/actions.js","Components/PatientItem/PatientItem.jsx","Components/PatientList/PatientList.jsx","Components/ListArea/ListArea.jsx","Components/ListArea/downloadPresentList.js","Components/ListArea/downloadQuittingList.js","settings.js","App.jsx","reducers/index.js","store/configureStore.js","index.jsx"],"names":["getAge","PatientBirthdate","today","Date","age","getFullYear","mParameter","getMonth","getDate","PatientInfo","useSelector","state","selectedPatient","isPatientSelected","className","firstName","birthDate","diagnosis","ACTION_NAMES","PatientItem","patientData","storePatientData","patient","dispatch","useDispatch","JSON","stringify","onClick","type","payload","Container","Row","Col","historyNumber","PatientList","patientList","division","map","ListArea","error","useEffect","presentListJsonUrl","quittingListJsonUrl","process","a","axios","get","presentListResponse","data","quittingListResponse","id","name","defaultChecked","htmlFor","presentListIsLoaded","present","length","quittingListIsLoaded","quitting","message","App","fluid","xs","md","initialState","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c9ad3bf.chunk.js","sourcesContent":["/* eslint-disable no-plusplus */\nimport React from 'react';\nimport './PatientInfo.sass';\nimport { useSelector } from 'react-redux';\n\nfunction getAge(PatientBirthdate) {\n  const today = new Date();\n  let age = today.getFullYear() - PatientBirthdate.getFullYear();\n  const mParameter = today.getMonth() - PatientBirthdate.getMonth();\n  if (mParameter < 0 || (mParameter === 0 && today.getDate() < PatientBirthdate.getDate())) {\n    age--;\n  }\n  return age;\n}\n\nfunction PatientInfo() {\n  const { selectedPatient, isPatientSelected } = useSelector((state) => state);\n  return (\n    <div className=\"patientInfo\">\n      <div className=\"infoTitle\">\n        Информация о пациенте\n      </div>\n      <div className=\"infoArea\">\n        <div className=\"directionRow\">\n          <div className=\"infoParameter\">ФИО</div>\n          <div className=\"infoValue\">\n            {(isPatientSelected === true)\n              ? selectedPatient.firstName\n              : ''}\n          </div>\n        </div>\n        <div className=\"directionRow\">\n          <div className=\"infoParameter\">Возраст</div>\n          <div className=\"infoValue\">\n            {(isPatientSelected === true)\n              ? getAge(new Date(selectedPatient.birthDate))\n              : ''}\n          </div>\n        </div>\n        <div className=\"directionRow\">\n          <div className=\"infoParameter\">Диагноз</div>\n          <div className=\"infoValue\">\n            {(isPatientSelected === true)\n              ? selectedPatient.diagnosis\n              : ''}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PatientInfo;\n","export const ACTION_NAMES = {\n  QUITTING_LIST_FETCH_SUCCESS: 'QUITTING_LIST_FETCH_SUCCESS',\n  QUITTING_LIST_FETCH_FAIL: 'QUITTING_LIST_FETCH_FAIL',\n  PRESENT_LIST_FETCH_SUCCESS: 'PRESENT_LIST_FETCH_SUCCESS',\n  PRESENT_LIST_FETCH_FAIL: 'PRESENT_LIST_FETCH_FAIL',\n  SELECT_PATIENT: 'SELECT_PATIENT',\n};\n\nexport const quittingListFetchSuccess = (data) => ({\n  type: ACTION_NAMES.QUITTING_LIST_FETCH_SUCCESS,\n  payload: data,\n});\n\nexport const quittingListFetchFail = (error) => ({\n  type: ACTION_NAMES.QUITTING_LIST_FETCH_FAIL,\n  payload: error,\n});\n\nexport const presentListFetchSuccess = (data) => ({\n  type: ACTION_NAMES.PRESENT_LIST_FETCH_SUCCESS,\n  payload: data,\n});\n\nexport const presentListFetchFail = (error) => ({\n  type: ACTION_NAMES.PRESENT_LIST_FETCH_FAIL,\n  payload: error,\n});\n\nexport const selectPatient = (data) => ({\n  type: ACTION_NAMES.SELECT_PATIENT,\n  payload: data,\n});\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport React from 'react';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport './PatientItem.sass';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPatient } from '../../actions/actions';\n\nfunction isPatientSelected(patientData, storePatientData) {\n  return (JSON.stringify(patientData) === JSON.stringify(storePatientData));\n}\n\nfunction PatientItem({ patient }) {\n  const dispatch = useDispatch();\n  const { selectedPatient } = useSelector((state) => state);\n  return (\n    <li\n      className={(isPatientSelected(patient, selectedPatient))\n        ? 'selected'\n        : 'casual'}\n      onClick={() => { dispatch(selectPatient(patient)); }}\n    >\n      <div className=\"listHover\">\n        <Container>\n          <Row>\n            <Col>\n              {patient.historyNumber}\n            </Col>\n            <Col>\n              {patient.firstName}\n            </Col>\n            <Col>\n              {patient.diagnosis}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n\n    </li>\n  );\n}\n\nPatientItem.propTypes = {\n  patient: PropTypes.shape({\n    historyNumber: PropTypes.number,\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    patrName: PropTypes.string,\n    birthDate: PropTypes.string,\n    diagnosis: PropTypes.string,\n    bedNumber: PropTypes.number,\n  }).isRequired,\n};\n\nexport default PatientItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PatientItem from '../PatientItem/PatientItem';\n\nexport default function PatientList({ patientList, division }) {\n  return (\n    <ul>\n      {patientList.map((patient) => (\n        <PatientItem\n          patient={patient}\n          key={division + patient.historyNumber}\n        />\n      ))}\n    </ul>\n  );\n}\n\nPatientList.propTypes = {\n  patientList: PropTypes.arrayOf(PropTypes.shape({\n    historyNumber: PropTypes.number,\n    firstName: PropTypes.string,\n    lastName: PropTypes.string,\n    patrName: PropTypes.string,\n    birthDate: PropTypes.string,\n    diagnosis: PropTypes.string,\n    bedNumber: PropTypes.number,\n  })).isRequired,\n  division: PropTypes.string.isRequired,\n};\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { useEffect } from 'react';\nimport './ListArea.sass';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PatientList from '../PatientList/PatientList';\nimport downloadPresentList from './downloadPresentList';\nimport downloadQuittingList from './downloadQuittingList';\nimport { REACT_APP_PRESENT_LIST_JSON_URL, REACT_APP_QUITTING_LIST_JSON_URL } from '../../settings';\n\nfunction ListArea() {\n  const { patientList, error } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(downloadPresentList(REACT_APP_PRESENT_LIST_JSON_URL));\n    dispatch(downloadQuittingList(REACT_APP_QUITTING_LIST_JSON_URL));\n  }, []);\n  if (error === null) {\n    return (\n      <div className=\"patientsList\">\n        <div className=\"listNav\">\n          <input type=\"radio\" id=\"tab-btn-1\" name=\"listNav\" defaultChecked />\n          <label htmlFor=\"tab-btn-1\">\n            <div className=\"navButton\">\n              ПРИСУТСТВУЮТ(\n              {(patientList.presentListIsLoaded === true)\n                ? patientList.present.length\n                : '0'}\n              )\n            </div>\n          </label>\n          <input type=\"radio\" id=\"tab-btn-2\" name=\"listNav\" />\n          <label htmlFor=\"tab-btn-2\">\n            <div className=\"navButton\">\n              ВЫБЫВШИЕ(\n              {(patientList.quittingListIsLoaded === true)\n                ? patientList.quitting.length\n                : '0'}\n\n              )\n            </div>\n          </label>\n          <div className=\"listColumns\">\n            <Container>\n              <Row>\n                <Col>\n                  №ИБ\n                </Col>\n                <Col>\n                  ФИО\n                </Col>\n                <Col>\n                  Диагноз\n                </Col>\n              </Row>\n            </Container>\n          </div>\n          <div id=\"present\" className=\"scrollable\">\n            {(patientList.presentListIsLoaded === true)\n              ? <PatientList patientList={patientList.present} division=\"PRESENT_LIST\" />\n              : <div>Загрузка, подождите пожалуйста</div>}\n\n          </div>\n          <div id=\"quitting\" className=\"scrollable\">\n            {(patientList.presentListIsLoaded === true)\n              ? <PatientList patientList={patientList.quitting} division=\"QUITTING_LIST\" />\n              : <div>Загрузка, подождите пожалуйста</div>}\n\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n  return (\n    <div className=\"patientsList\">\n      {error.message}\n    </div>\n  );\n}\n\nexport default ListArea;\n","import axios from 'axios';\nimport { presentListFetchFail, presentListFetchSuccess } from '../../actions/actions';\n\nexport default function downloadPresentList(presentListJsonUrl) {\n  return async (dispatch) => {\n    try {\n      const presentListResponse = await axios.get(presentListJsonUrl);\n      dispatch(presentListFetchSuccess(presentListResponse.data));\n    } catch (error) {\n      dispatch(presentListFetchFail(error));\n    }\n  };\n}\n","import axios from 'axios';\nimport { quittingListFetchFail, quittingListFetchSuccess } from '../../actions/actions';\n\nexport default function downloadQuittingList(quittingListJsonUrl) {\n  return async (dispatch) => {\n    try {\n      const quittingListResponse = await axios.get(quittingListJsonUrl);\n      dispatch(quittingListFetchSuccess(quittingListResponse.data));\n    } catch (error) {\n      dispatch(quittingListFetchFail(error));\n    }\n  };\n}\n","export const { REACT_APP_PRESENT_LIST_JSON_URL } = process.env;\n\nexport const { REACT_APP_QUITTING_LIST_JSON_URL } = process.env;\n","import './App.sass';\nimport React from 'react';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport PatientInfo from './Components/PatientInfo/PatientInfo';\nimport ListArea from './Components/ListArea/ListArea';\n\nfunction App() {\n  return (\n    <div>\n      <Container fluid>\n        <Row>\n          <Col xs={12} md={6}>\n            <PatientInfo />\n          </Col>\n          <Col xs={12} md={6}>\n            <ListArea />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ACTION_NAMES } from '../actions/actions';\n\nexport const initialState = {\n  patientList: {\n    quitting: [],\n    quittingListIsLoaded: false,\n    present: [],\n    presentListIsLoaded: false,\n  },\n  selectedPatient: {},\n  isPatientSelected: false,\n  error: null,\n};\n\nexport function rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTION_NAMES.PRESENT_LIST_FETCH_SUCCESS:\n      return {\n        ...state,\n        patientList: {\n          ...state.patientList,\n          present: action.payload,\n          presentListIsLoaded: true,\n        },\n      };\n    case ACTION_NAMES.PRESENT_LIST_FETCH_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case ACTION_NAMES.QUITTING_LIST_FETCH_SUCCESS:\n      return {\n        ...state,\n        patientList: {\n          ...state.patientList,\n          quitting: action.payload,\n          quittingListIsLoaded: true,\n        },\n      };\n    case ACTION_NAMES.QUITTING_LIST_FETCH_FAIL:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case ACTION_NAMES.SELECT_PATIENT:\n      return {\n        ...state,\n        selectedPatient: {\n          ...action.payload,\n        },\n        isPatientSelected: true,\n      };\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store/configureStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}